load("@io_bazel_rules_go//go:def.bzl", "go_test")

"""Macros for running acceptance tests."""

def acceptance_test_suite(
        name,
        srcs,
        testdata,
        builder,
        structure_test_config = ":config.yaml",
        versions = None,
        args = None,
        deps = None,
        argsmap = None,
        **kwargs):
    """Macro to define an acceptance test.

    Args:
      name: the name of the test
      srcs: the test source files
      testdata: a build target for a directory containing sample test applications
      builder: a build target for a builder.tar to test
      structure_test_config: a build target for the structured container test's config file
      versions: a list of GOOGLE_RUNTIME_VERSIONS to test, these correspond to language versions
      args: additional arguments to be passed to the test binary beyond ones corresponding to the arguments to this function
      deps: additional test dependencies beyond the acceptance package
      argsmap: version specific arguments map where the key is the version and the value is a list of flags that will be passed to the acceptance test framework
      **kwargs: this argument captures all additional arguments and forwards them to the generated go_test rule
    """

    args = _build_args(args, name, testdata, builder, structure_test_config)
    data = _build_data(structure_test_config, builder, testdata)
    deps = _build_deps(deps)

    # if there are no versions passed in then create a go_test(...) rule directly without changing
    # the name of the test
    if versions == None:
        _new_go_test_for_single_version(name, srcs, args, data, deps, **kwargs)
    else:
        _new_go_test_for_versions(versions, name, srcs, args, data, deps, argsmap, **kwargs)

def _new_go_test_for_versions(versions, name, srcs, args, data, deps, argsmap, **kwargs):
    tests = []
    for v in versions:
        ver_name = v + "_" + name
        tests.append(ver_name)
        ver_args = list(args)
        ver_args.append("-runtime-version=" + v)

        if argsmap != None and argsmap.get(v) != None:
            for ak, av in argsmap[v].items():
                ver_args.append(ak + "=" + av)

        _new_go_test(ver_name, srcs, ver_args, data, deps, **kwargs)

    # Each of the go_test(...) rules generated by _new_go_test have a name that is hard for
    # developers to reference, for example, '//acceptance:gcp_test_3.1.416'. To make this
    # easy to use, generate a test suite with the name of the original build target, so
    # developers can reference simply '//acceptance:gcp_test'.
    native.test_suite(
        name = name,
        tests = tests,
    )
    _new_bin_filegroup_alias(name, tests[0])

def _new_go_test_for_single_version(name, srcs, args, data, deps, **kwargs):
    _new_go_test(name, srcs, args, data, deps, **kwargs)
    _new_bin_filegroup_alias(name, name)

def _new_go_test(name, srcs, args, data, deps, **kwargs):
    go_test(
        name = name,
        size = "enormous",
        srcs = srcs,
        args = args,
        data = data,
        tags = [
            "local",
        ],
        gc_linkopts = [],
        deps = deps,
        **kwargs
    )

def _new_bin_filegroup_alias(name, test_name):
    # The test binaries generated in this file have names such as '1.13_gae_test'. For external
    # consumers who wish to invoke the test binary directly, the following filegroup gives them
    # a static name that they can reference such as 'gae_test_bin'.
    native.filegroup(
        name = name + "_bin",
        srcs = [":" + test_name],
        testonly = 1,
    )

def _build_args(args, name, testdata, builder, structure_test_config):
    short_name = _remove_suffix(name, "_test")
    builder_name = _extract_builder_name(builder)

    if args == None:
        args = []
    args.append("-test-data=$(location " + testdata + ")")
    args.append("-structure-test-config=$(location " + structure_test_config + ")")
    args.append("-builder-source=$(location " + builder + ")")
    args.append("-builder-prefix=" + builder_name + "-" + short_name + "-acceptance-test-")
    args.append("-runtime-name=" + builder_name)
    return args

def _build_data(structure_test_config, builder, testdata):
    return [
        structure_test_config,
        builder,
        testdata,
    ]

def _extract_builder_name(builder):
    # A builder target is a full google3 path, the name of the builder, and then :builder.tar, the following
    # extracts the name of the builder.
    builder_name = _remove_suffix(builder, ":builder.tar")
    builder_name = builder_name[builder_name.rindex("/") + 1:]
    return builder_name

def _build_deps(deps):
    if deps == None:
        deps = []
    else:
        # make a copy of the list to prevent mutating a shared 'deps' value declared in a BUILD file
        deps = list(deps)
    deps.append("//internal/acceptance")
    return deps

# Once bazel supports python 3.9, this function can be replaced with `value.removesuffix(suffix)`:
def _remove_suffix(value, suffix):
    if value.endswith(suffix):
        value = value[:-len(suffix)]
    return value
